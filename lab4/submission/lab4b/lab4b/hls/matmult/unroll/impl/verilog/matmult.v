// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmult,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7a200t-rs484-2I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.530000,HLS_SYN_LAT=3361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=739,HLS_SYN_LUT=795,HLS_VERSION=2019_2}" *)

module matmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] A_address0;
output   A_ce0;
input  [15:0] A_q0;
output  [7:0] A_address1;
output   A_ce1;
input  [15:0] A_q1;
output  [7:0] B_address0;
output   B_ce0;
input  [15:0] B_q0;
output  [7:0] B_address1;
output   B_ce1;
input  [15:0] B_q1;
output  [7:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] A_address0;
reg A_ce0;
reg[7:0] A_address1;
reg A_ce1;
reg[7:0] B_address0;
reg B_ce0;
reg[7:0] B_address1;
reg B_ce1;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_378;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg  signed [15:0] reg_383;
reg  signed [15:0] reg_388;
reg  signed [15:0] reg_393;
wire   [4:0] i_fu_404_p2;
reg   [4:0] i_reg_1097;
wire    ap_CS_fsm_state2;
wire   [9:0] zext_ln14_2_fu_423_p1;
reg   [9:0] zext_ln14_2_reg_1102;
wire   [0:0] icmp_ln11_fu_398_p2;
reg   [7:0] A_addr_reg_1107;
reg   [7:0] A_addr_1_reg_1112;
reg   [7:0] A_addr_2_reg_1117;
reg   [7:0] A_addr_3_reg_1122;
reg   [7:0] A_addr_4_reg_1127;
reg   [7:0] A_addr_5_reg_1132;
reg   [7:0] A_addr_6_reg_1137;
reg   [7:0] A_addr_7_reg_1142;
reg   [7:0] A_addr_8_reg_1147;
reg   [7:0] A_addr_9_reg_1152;
reg   [7:0] A_addr_10_reg_1157;
reg   [7:0] A_addr_11_reg_1162;
reg   [7:0] A_addr_12_reg_1167;
reg   [7:0] A_addr_13_reg_1172;
reg   [7:0] A_addr_14_reg_1177;
reg   [7:0] A_addr_15_reg_1182;
wire   [4:0] j_fu_658_p2;
reg   [4:0] j_reg_1190;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln12_fu_652_p2;
wire  signed [4:0] xor_ln14_fu_669_p2;
reg  signed [4:0] xor_ln14_reg_1200;
wire  signed [31:0] mul_ln14_fu_987_p2;
reg  signed [31:0] mul_ln14_reg_1227;
wire  signed [6:0] add_ln14_15_fu_718_p2;
reg  signed [6:0] add_ln14_15_reg_1232;
wire  signed [31:0] mul_ln14_2_fu_1000_p2;
reg  signed [31:0] mul_ln14_2_reg_1247;
wire  signed [31:0] grp_fu_993_p3;
reg  signed [31:0] add_ln14_reg_1252;
wire  signed [31:0] mul_ln14_4_fu_1014_p2;
reg  signed [31:0] mul_ln14_4_reg_1267;
(* use_dsp48 = "no" *) wire   [31:0] add_ln14_2_fu_787_p2;
reg   [31:0] add_ln14_2_reg_1272;
wire   [7:0] zext_ln14_4_fu_791_p1;
reg   [7:0] zext_ln14_4_reg_1277;
wire  signed [31:0] mul_ln14_6_fu_1027_p2;
reg  signed [31:0] mul_ln14_6_reg_1292;
wire  signed [31:0] grp_fu_1020_p3;
reg  signed [31:0] add_ln14_3_reg_1297;
wire  signed [31:0] mul_ln14_8_fu_1041_p2;
reg  signed [31:0] mul_ln14_8_reg_1312;
(* use_dsp48 = "no" *) wire   [31:0] add_ln14_5_fu_866_p2;
reg   [31:0] add_ln14_5_reg_1317;
wire   [9:0] add_ln16_fu_891_p2;
reg   [9:0] add_ln16_reg_1332;
wire  signed [31:0] mul_ln14_10_fu_1054_p2;
reg  signed [31:0] mul_ln14_10_reg_1337;
wire  signed [31:0] grp_fu_1047_p3;
reg  signed [31:0] add_ln14_7_reg_1342;
wire  signed [31:0] mul_ln14_12_fu_1067_p2;
reg  signed [31:0] mul_ln14_12_reg_1352;
wire  signed [31:0] grp_fu_1060_p3;
reg  signed [31:0] add_ln14_8_reg_1357;
wire  signed [31:0] mul_ln14_14_fu_1080_p2;
reg  signed [31:0] mul_ln14_14_reg_1362;
wire  signed [31:0] grp_fu_1073_p3;
reg  signed [31:0] add_ln14_10_reg_1367;
(* use_dsp48 = "no" *) wire   [31:0] add_ln14_12_fu_960_p2;
reg   [31:0] add_ln14_12_reg_1372;
wire    ap_CS_fsm_state13;
wire   [31:0] add_ln14_14_fu_977_p2;
reg   [31:0] add_ln14_14_reg_1377;
wire    ap_CS_fsm_state14;
reg   [4:0] i_0_reg_355;
reg   [4:0] j_0_reg_366;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln14_fu_418_p1;
wire   [63:0] tmp_1_fu_433_p3;
wire   [63:0] tmp_2_fu_448_p3;
wire   [63:0] tmp_3_fu_463_p3;
wire   [63:0] tmp_4_fu_478_p3;
wire   [63:0] tmp_5_fu_493_p3;
wire   [63:0] tmp_6_fu_508_p3;
wire   [63:0] tmp_7_fu_523_p3;
wire   [63:0] tmp_8_fu_538_p3;
wire   [63:0] tmp_9_fu_553_p3;
wire   [63:0] tmp_s_fu_568_p3;
wire   [63:0] tmp_10_fu_583_p3;
wire   [63:0] tmp_11_fu_598_p3;
wire   [63:0] tmp_12_fu_613_p3;
wire   [63:0] tmp_13_fu_628_p3;
wire   [63:0] tmp_14_fu_643_p3;
wire   [63:0] zext_ln14_1_fu_664_p1;
wire   [63:0] zext_ln14_6_fu_675_p1;
wire   [63:0] tmp_15_fu_680_p3;
wire   [63:0] zext_ln14_7_fu_692_p1;
wire   [63:0] tmp_16_fu_697_p3;
wire   [63:0] zext_ln14_8_fu_724_p1;
wire   [63:0] tmp_17_fu_729_p3;
wire   [63:0] zext_ln14_9_fu_757_p1;
wire   [63:0] tmp_18_fu_762_p3;
wire   [63:0] zext_ln14_10_fu_801_p1;
wire   [63:0] tmp_19_fu_806_p3;
wire   [63:0] zext_ln14_11_fu_836_p1;
wire   [63:0] tmp_20_fu_841_p3;
wire   [63:0] zext_ln14_12_fu_877_p1;
wire   [63:0] tmp_21_fu_882_p3;
wire   [63:0] zext_ln14_13_fu_915_p1;
wire   [63:0] zext_ln16_fu_983_p1;
wire   [8:0] tmp_fu_410_p3;
wire   [8:0] or_ln14_fu_427_p2;
wire   [8:0] or_ln14_1_fu_442_p2;
wire   [8:0] or_ln14_2_fu_457_p2;
wire   [8:0] or_ln14_3_fu_472_p2;
wire   [8:0] or_ln14_4_fu_487_p2;
wire   [8:0] or_ln14_5_fu_502_p2;
wire   [8:0] or_ln14_6_fu_517_p2;
wire   [8:0] or_ln14_7_fu_532_p2;
wire   [8:0] or_ln14_8_fu_547_p2;
wire   [8:0] or_ln14_9_fu_562_p2;
wire   [8:0] or_ln14_10_fu_577_p2;
wire   [8:0] or_ln14_11_fu_592_p2;
wire   [8:0] or_ln14_12_fu_607_p2;
wire   [8:0] or_ln14_13_fu_622_p2;
wire   [8:0] or_ln14_14_fu_637_p2;
wire  signed [5:0] sext_ln14_32_fu_689_p1;
wire   [6:0] zext_ln14_5_fu_714_p1;
wire  signed [6:0] sext_ln14_33_fu_754_p1;
wire  signed [31:0] grp_fu_1006_p3;
wire   [7:0] add_ln14_16_fu_795_p2;
wire   [7:0] add_ln14_17_fu_831_p2;
wire  signed [31:0] grp_fu_1033_p3;
wire  signed [7:0] sext_ln14_34_fu_874_p1;
wire   [9:0] zext_ln14_3_fu_870_p1;
wire  signed [7:0] sext_ln14_35_fu_912_p1;
wire  signed [31:0] grp_fu_1086_p3;
(* use_dsp48 = "no" *) wire   [31:0] add_ln14_9_fu_968_p2;
wire   [31:0] add_ln14_13_fu_972_p2;
wire   [31:0] add_ln14_6_fu_964_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U1(
    .din0(reg_378),
    .din1(reg_383),
    .dout(mul_ln14_fu_987_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U2(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_reg_1227),
    .dout(grp_fu_993_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U3(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_2_fu_1000_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U4(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_2_reg_1247),
    .dout(grp_fu_1006_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U5(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_4_fu_1014_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U6(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_4_reg_1267),
    .dout(grp_fu_1020_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U7(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_6_fu_1027_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U8(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_6_reg_1292),
    .dout(grp_fu_1033_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U9(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_8_fu_1041_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U10(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_8_reg_1312),
    .dout(grp_fu_1047_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U11(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_10_fu_1054_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U12(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_10_reg_1337),
    .dout(grp_fu_1060_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U13(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_12_fu_1067_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U14(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_12_reg_1352),
    .dout(grp_fu_1073_p3)
);

matmult_mul_mul_1bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
matmult_mul_mul_1bkb_U15(
    .din0(reg_388),
    .din1(reg_393),
    .dout(mul_ln14_14_fu_1080_p2)
);

matmult_mac_muladcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmult_mac_muladcud_U16(
    .din0(reg_378),
    .din1(reg_383),
    .din2(mul_ln14_14_reg_1362),
    .dout(grp_fu_1086_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_652_p2 == 1'd1))) begin
        i_0_reg_355 <= i_reg_1097;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_355 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_398_p2 == 1'd0))) begin
        j_0_reg_366 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_366 <= j_reg_1190;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_378 <= A_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_378 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_383 <= B_q1;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_383 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_388 <= A_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_388 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_393 <= B_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_393 <= B_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_398_p2 == 1'd0))) begin
        A_addr_10_reg_1157[7 : 4] <= tmp_s_fu_568_p3[7 : 4];
        A_addr_11_reg_1162[7 : 4] <= tmp_10_fu_583_p3[7 : 4];
        A_addr_12_reg_1167[7 : 4] <= tmp_11_fu_598_p3[7 : 4];
        A_addr_13_reg_1172[7 : 4] <= tmp_12_fu_613_p3[7 : 4];
        A_addr_14_reg_1177[7 : 4] <= tmp_13_fu_628_p3[7 : 4];
        A_addr_15_reg_1182[7 : 4] <= tmp_14_fu_643_p3[7 : 4];
        A_addr_1_reg_1112[7 : 4] <= tmp_1_fu_433_p3[7 : 4];
        A_addr_2_reg_1117[7 : 4] <= tmp_2_fu_448_p3[7 : 4];
        A_addr_3_reg_1122[7 : 4] <= tmp_3_fu_463_p3[7 : 4];
        A_addr_4_reg_1127[7 : 4] <= tmp_4_fu_478_p3[7 : 4];
        A_addr_5_reg_1132[7 : 4] <= tmp_5_fu_493_p3[7 : 4];
        A_addr_6_reg_1137[7 : 4] <= tmp_6_fu_508_p3[7 : 4];
        A_addr_7_reg_1142[7 : 4] <= tmp_7_fu_523_p3[7 : 4];
        A_addr_8_reg_1147[7 : 4] <= tmp_8_fu_538_p3[7 : 4];
        A_addr_9_reg_1152[7 : 4] <= tmp_9_fu_553_p3[7 : 4];
        A_addr_reg_1107[7 : 4] <= zext_ln14_fu_418_p1[7 : 4];
        zext_ln14_2_reg_1102[8 : 4] <= zext_ln14_2_fu_423_p1[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln14_10_reg_1367 <= grp_fu_1073_p3;
        mul_ln14_14_reg_1362 <= mul_ln14_14_fu_1080_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln14_12_reg_1372 <= add_ln14_12_fu_960_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln14_14_reg_1377 <= add_ln14_14_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln14_15_reg_1232 <= add_ln14_15_fu_718_p2;
        add_ln14_reg_1252 <= grp_fu_993_p3;
        mul_ln14_2_reg_1247 <= mul_ln14_2_fu_1000_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln14_2_reg_1272 <= add_ln14_2_fu_787_p2;
        mul_ln14_4_reg_1267 <= mul_ln14_4_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln14_3_reg_1297 <= grp_fu_1020_p3;
        mul_ln14_6_reg_1292 <= mul_ln14_6_fu_1027_p2;
        zext_ln14_4_reg_1277[4 : 0] <= zext_ln14_4_fu_791_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln14_5_reg_1317 <= add_ln14_5_fu_866_p2;
        mul_ln14_8_reg_1312 <= mul_ln14_8_fu_1041_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln14_7_reg_1342 <= grp_fu_1047_p3;
        add_ln16_reg_1332 <= add_ln16_fu_891_p2;
        mul_ln14_10_reg_1337 <= mul_ln14_10_fu_1054_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln14_8_reg_1357 <= grp_fu_1060_p3;
        mul_ln14_12_reg_1352 <= mul_ln14_12_fu_1067_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1097 <= i_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1190 <= j_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln14_reg_1227 <= mul_ln14_fu_987_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xor_ln14_reg_1200 <= xor_ln14_fu_669_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = A_addr_14_reg_1177;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = A_addr_12_reg_1167;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = A_addr_10_reg_1157;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = A_addr_8_reg_1147;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = A_addr_6_reg_1137;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = A_addr_4_reg_1127;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = A_addr_1_reg_1112;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = A_addr_reg_1107;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        A_address1 = A_addr_15_reg_1182;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address1 = A_addr_13_reg_1172;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address1 = A_addr_11_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = A_addr_9_reg_1152;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address1 = A_addr_7_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = A_addr_5_reg_1132;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address1 = A_addr_3_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = A_addr_2_reg_1117;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = tmp_21_fu_882_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_address0 = tmp_20_fu_841_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        B_address0 = tmp_19_fu_806_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = tmp_18_fu_762_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_address0 = tmp_17_fu_729_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address0 = tmp_16_fu_697_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = zext_ln14_6_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = zext_ln14_1_fu_664_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_address1 = zext_ln14_13_fu_915_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address1 = zext_ln14_12_fu_877_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_address1 = zext_ln14_11_fu_836_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        B_address1 = zext_ln14_10_fu_801_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address1 = zext_ln14_9_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_address1 = zext_ln14_8_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        B_address1 = zext_ln14_7_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address1 = tmp_15_fu_680_p3;
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_398_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_398_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln11_fu_398_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_652_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = zext_ln16_fu_983_p1;

assign C_d0 = add_ln14_14_reg_1377;

assign add_ln14_12_fu_960_p2 = ($signed(grp_fu_1086_p3) + $signed(add_ln14_10_reg_1367));

assign add_ln14_13_fu_972_p2 = (add_ln14_12_reg_1372 + add_ln14_9_fu_968_p2);

assign add_ln14_14_fu_977_p2 = (add_ln14_13_fu_972_p2 + add_ln14_6_fu_964_p2);

assign add_ln14_15_fu_718_p2 = ($signed(zext_ln14_5_fu_714_p1) + $signed(7'd80));

assign add_ln14_16_fu_795_p2 = ($signed(zext_ln14_4_fu_791_p1) + $signed(8'd144));

assign add_ln14_17_fu_831_p2 = ($signed(zext_ln14_4_reg_1277) + $signed(8'd176));

assign add_ln14_2_fu_787_p2 = ($signed(grp_fu_1006_p3) + $signed(add_ln14_reg_1252));

assign add_ln14_5_fu_866_p2 = ($signed(grp_fu_1033_p3) + $signed(add_ln14_3_reg_1297));

assign add_ln14_6_fu_964_p2 = (add_ln14_5_reg_1317 + add_ln14_2_reg_1272);

assign add_ln14_9_fu_968_p2 = ($signed(add_ln14_8_reg_1357) + $signed(add_ln14_7_reg_1342));

assign add_ln16_fu_891_p2 = (zext_ln14_3_fu_870_p1 + zext_ln14_2_reg_1102);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_404_p2 = (i_0_reg_355 + 5'd1);

assign icmp_ln11_fu_398_p2 = ((i_0_reg_355 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_652_p2 = ((j_0_reg_366 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_658_p2 = (j_0_reg_366 + 5'd1);

assign or_ln14_10_fu_577_p2 = (tmp_fu_410_p3 | 9'd11);

assign or_ln14_11_fu_592_p2 = (tmp_fu_410_p3 | 9'd12);

assign or_ln14_12_fu_607_p2 = (tmp_fu_410_p3 | 9'd13);

assign or_ln14_13_fu_622_p2 = (tmp_fu_410_p3 | 9'd14);

assign or_ln14_14_fu_637_p2 = (tmp_fu_410_p3 | 9'd15);

assign or_ln14_1_fu_442_p2 = (tmp_fu_410_p3 | 9'd2);

assign or_ln14_2_fu_457_p2 = (tmp_fu_410_p3 | 9'd3);

assign or_ln14_3_fu_472_p2 = (tmp_fu_410_p3 | 9'd4);

assign or_ln14_4_fu_487_p2 = (tmp_fu_410_p3 | 9'd5);

assign or_ln14_5_fu_502_p2 = (tmp_fu_410_p3 | 9'd6);

assign or_ln14_6_fu_517_p2 = (tmp_fu_410_p3 | 9'd7);

assign or_ln14_7_fu_532_p2 = (tmp_fu_410_p3 | 9'd8);

assign or_ln14_8_fu_547_p2 = (tmp_fu_410_p3 | 9'd9);

assign or_ln14_9_fu_562_p2 = (tmp_fu_410_p3 | 9'd10);

assign or_ln14_fu_427_p2 = (tmp_fu_410_p3 | 9'd1);

assign sext_ln14_32_fu_689_p1 = xor_ln14_reg_1200;

assign sext_ln14_33_fu_754_p1 = xor_ln14_reg_1200;

assign sext_ln14_34_fu_874_p1 = add_ln14_15_reg_1232;

assign sext_ln14_35_fu_912_p1 = xor_ln14_reg_1200;

assign tmp_10_fu_583_p3 = {{55'd0}, {or_ln14_10_fu_577_p2}};

assign tmp_11_fu_598_p3 = {{55'd0}, {or_ln14_11_fu_592_p2}};

assign tmp_12_fu_613_p3 = {{55'd0}, {or_ln14_12_fu_607_p2}};

assign tmp_13_fu_628_p3 = {{55'd0}, {or_ln14_13_fu_622_p2}};

assign tmp_14_fu_643_p3 = {{55'd0}, {or_ln14_14_fu_637_p2}};

assign tmp_15_fu_680_p3 = {{59'd1}, {j_0_reg_366}};

assign tmp_16_fu_697_p3 = {{59'd2}, {j_0_reg_366}};

assign tmp_17_fu_729_p3 = {{59'd3}, {j_0_reg_366}};

assign tmp_18_fu_762_p3 = {{59'd4}, {j_0_reg_366}};

assign tmp_19_fu_806_p3 = {{59'd5}, {j_0_reg_366}};

assign tmp_1_fu_433_p3 = {{55'd0}, {or_ln14_fu_427_p2}};

assign tmp_20_fu_841_p3 = {{59'd6}, {j_0_reg_366}};

assign tmp_21_fu_882_p3 = {{59'd7}, {j_0_reg_366}};

assign tmp_2_fu_448_p3 = {{55'd0}, {or_ln14_1_fu_442_p2}};

assign tmp_3_fu_463_p3 = {{55'd0}, {or_ln14_2_fu_457_p2}};

assign tmp_4_fu_478_p3 = {{55'd0}, {or_ln14_3_fu_472_p2}};

assign tmp_5_fu_493_p3 = {{55'd0}, {or_ln14_4_fu_487_p2}};

assign tmp_6_fu_508_p3 = {{55'd0}, {or_ln14_5_fu_502_p2}};

assign tmp_7_fu_523_p3 = {{55'd0}, {or_ln14_6_fu_517_p2}};

assign tmp_8_fu_538_p3 = {{55'd0}, {or_ln14_7_fu_532_p2}};

assign tmp_9_fu_553_p3 = {{55'd0}, {or_ln14_8_fu_547_p2}};

assign tmp_fu_410_p3 = {{i_0_reg_355}, {4'd0}};

assign tmp_s_fu_568_p3 = {{55'd0}, {or_ln14_9_fu_562_p2}};

assign xor_ln14_fu_669_p2 = (j_0_reg_366 ^ 5'd16);

assign zext_ln14_10_fu_801_p1 = add_ln14_16_fu_795_p2;

assign zext_ln14_11_fu_836_p1 = add_ln14_17_fu_831_p2;

assign zext_ln14_12_fu_877_p1 = $unsigned(sext_ln14_34_fu_874_p1);

assign zext_ln14_13_fu_915_p1 = $unsigned(sext_ln14_35_fu_912_p1);

assign zext_ln14_1_fu_664_p1 = j_0_reg_366;

assign zext_ln14_2_fu_423_p1 = tmp_fu_410_p3;

assign zext_ln14_3_fu_870_p1 = j_0_reg_366;

assign zext_ln14_4_fu_791_p1 = j_0_reg_366;

assign zext_ln14_5_fu_714_p1 = j_0_reg_366;

assign zext_ln14_6_fu_675_p1 = $unsigned(xor_ln14_fu_669_p2);

assign zext_ln14_7_fu_692_p1 = $unsigned(sext_ln14_32_fu_689_p1);

assign zext_ln14_8_fu_724_p1 = $unsigned(add_ln14_15_fu_718_p2);

assign zext_ln14_9_fu_757_p1 = $unsigned(sext_ln14_33_fu_754_p1);

assign zext_ln14_fu_418_p1 = tmp_fu_410_p3;

assign zext_ln16_fu_983_p1 = add_ln16_reg_1332;

always @ (posedge ap_clk) begin
    zext_ln14_2_reg_1102[3:0] <= 4'b0000;
    zext_ln14_2_reg_1102[9] <= 1'b0;
    A_addr_reg_1107[3:0] <= 4'b0000;
    A_addr_1_reg_1112[3:0] <= 4'b0001;
    A_addr_2_reg_1117[3:0] <= 4'b0010;
    A_addr_3_reg_1122[3:0] <= 4'b0011;
    A_addr_4_reg_1127[3:0] <= 4'b0100;
    A_addr_5_reg_1132[3:0] <= 4'b0101;
    A_addr_6_reg_1137[3:0] <= 4'b0110;
    A_addr_7_reg_1142[3:0] <= 4'b0111;
    A_addr_8_reg_1147[3:0] <= 4'b1000;
    A_addr_9_reg_1152[3:0] <= 4'b1001;
    A_addr_10_reg_1157[3:0] <= 4'b1010;
    A_addr_11_reg_1162[3:0] <= 4'b1011;
    A_addr_12_reg_1167[3:0] <= 4'b1100;
    A_addr_13_reg_1172[3:0] <= 4'b1101;
    A_addr_14_reg_1177[3:0] <= 4'b1110;
    A_addr_15_reg_1182[3:0] <= 4'b1111;
    zext_ln14_4_reg_1277[7:5] <= 3'b000;
end

endmodule //matmult
