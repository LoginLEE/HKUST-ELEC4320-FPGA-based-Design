-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmult,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xq7a200t-rs484-2I,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.530000,HLS_SYN_LAT=3361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=739,HLS_SYN_LUT=795,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv55_0 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_9 : STD_LOGIC_VECTOR (8 downto 0) := "000001001";
    constant ap_const_lv9_A : STD_LOGIC_VECTOR (8 downto 0) := "000001010";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv9_E : STD_LOGIC_VECTOR (8 downto 0) := "000001110";
    constant ap_const_lv9_F : STD_LOGIC_VECTOR (8 downto 0) := "000001111";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv59_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv59_3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv59_4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv59_5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv8_B0 : STD_LOGIC_VECTOR (7 downto 0) := "10110000";
    constant ap_const_lv59_6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv59_7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_383 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_388 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1097 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_2_fu_423_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_2_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln11_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_addr_reg_1107 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_1_reg_1112 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_2_reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_3_reg_1122 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_4_reg_1127 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_5_reg_1132 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_6_reg_1137 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_7_reg_1142 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_8_reg_1147 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_9_reg_1152 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_10_reg_1157 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_11_reg_1162 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_12_reg_1167 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_13_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_14_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_addr_15_reg_1182 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1190 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln12_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln14_fu_669_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln14_reg_1200 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln14_fu_987_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_15_fu_718_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln14_15_reg_1232 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln14_2_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_2_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_993_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_reg_1252 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_4_reg_1267 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_2_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln14_2_fu_787_p2 : signal is "no";
    signal add_ln14_2_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln14_4_fu_791_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln14_4_reg_1277 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln14_6_fu_1027_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_6_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_3_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_8_fu_1041_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_8_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_5_fu_866_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln14_5_fu_866_p2 : signal is "no";
    signal add_ln14_5_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_891_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln16_reg_1332 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln14_10_fu_1054_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_10_reg_1337 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1047_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_7_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_12_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_12_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1060_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_8_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_14_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln14_14_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1073_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_10_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_12_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln14_12_fu_960_p2 : signal is "no";
    signal add_ln14_12_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln14_14_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_14_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln14_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_433_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_448_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_463_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_478_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_493_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_508_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_523_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_538_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_553_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_568_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_583_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_598_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_613_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_643_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_7_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_697_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_8_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_729_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_9_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_762_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_10_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_806_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_11_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_841_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_12_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_882_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_13_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_410_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_1_fu_442_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_2_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_3_fu_472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_4_fu_487_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_5_fu_502_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_6_fu_517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_7_fu_532_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_8_fu_547_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_9_fu_562_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_10_fu_577_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_11_fu_592_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_12_fu_607_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_13_fu_622_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln14_14_fu_637_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln14_32_fu_689_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_5_fu_714_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln14_33_fu_754_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1006_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_16_fu_795_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln14_17_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1033_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln14_34_fu_874_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln14_3_fu_870_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln14_35_fu_912_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1086_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_9_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of add_ln14_9_fu_968_p2 : signal is "no";
    signal add_ln14_13_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_6_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component matmult_mul_mul_1bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmult_mac_muladcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmult_mul_mul_1bkb_U1 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        dout => mul_ln14_fu_987_p2);

    matmult_mac_muladcud_U2 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_reg_1227,
        dout => grp_fu_993_p3);

    matmult_mul_mul_1bkb_U3 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_2_fu_1000_p2);

    matmult_mac_muladcud_U4 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_2_reg_1247,
        dout => grp_fu_1006_p3);

    matmult_mul_mul_1bkb_U5 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_4_fu_1014_p2);

    matmult_mac_muladcud_U6 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_4_reg_1267,
        dout => grp_fu_1020_p3);

    matmult_mul_mul_1bkb_U7 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_6_fu_1027_p2);

    matmult_mac_muladcud_U8 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_6_reg_1292,
        dout => grp_fu_1033_p3);

    matmult_mul_mul_1bkb_U9 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_8_fu_1041_p2);

    matmult_mac_muladcud_U10 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_8_reg_1312,
        dout => grp_fu_1047_p3);

    matmult_mul_mul_1bkb_U11 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_10_fu_1054_p2);

    matmult_mac_muladcud_U12 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_10_reg_1337,
        dout => grp_fu_1060_p3);

    matmult_mul_mul_1bkb_U13 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_12_fu_1067_p2);

    matmult_mac_muladcud_U14 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_12_reg_1352,
        dout => grp_fu_1073_p3);

    matmult_mul_mul_1bkb_U15 : component matmult_mul_mul_1bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => reg_388,
        din1 => reg_393,
        dout => mul_ln14_14_fu_1080_p2);

    matmult_mac_muladcud_U16 : component matmult_mac_muladcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => reg_378,
        din1 => reg_383,
        din2 => mul_ln14_14_reg_1362,
        dout => grp_fu_1086_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_652_p2 = ap_const_lv1_1))) then 
                i_0_reg_355 <= i_reg_1097;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_355 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_398_p2 = ap_const_lv1_0))) then 
                j_0_reg_366 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_0_reg_366 <= j_reg_1190;
            end if; 
        end if;
    end process;

    reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_378 <= A_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_378 <= A_q0;
            end if; 
        end if;
    end process;

    reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_383 <= B_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_383 <= B_q0;
            end if; 
        end if;
    end process;

    reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_388 <= A_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_388 <= A_q1;
            end if; 
        end if;
    end process;

    reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_393 <= B_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_393 <= B_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_398_p2 = ap_const_lv1_0))) then
                    A_addr_10_reg_1157(7 downto 4) <= tmp_s_fu_568_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_11_reg_1162(7 downto 4) <= tmp_10_fu_583_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_12_reg_1167(7 downto 4) <= tmp_11_fu_598_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_13_reg_1172(7 downto 4) <= tmp_12_fu_613_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_14_reg_1177(7 downto 4) <= tmp_13_fu_628_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_15_reg_1182(7 downto 4) <= tmp_14_fu_643_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_1_reg_1112(7 downto 4) <= tmp_1_fu_433_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_2_reg_1117(7 downto 4) <= tmp_2_fu_448_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_3_reg_1122(7 downto 4) <= tmp_3_fu_463_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_4_reg_1127(7 downto 4) <= tmp_4_fu_478_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_5_reg_1132(7 downto 4) <= tmp_5_fu_493_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_6_reg_1137(7 downto 4) <= tmp_6_fu_508_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_7_reg_1142(7 downto 4) <= tmp_7_fu_523_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_8_reg_1147(7 downto 4) <= tmp_8_fu_538_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_9_reg_1152(7 downto 4) <= tmp_9_fu_553_p3(8 - 1 downto 0)(7 downto 4);
                    A_addr_reg_1107(7 downto 4) <= zext_ln14_fu_418_p1(8 - 1 downto 0)(7 downto 4);
                    zext_ln14_2_reg_1102(8 downto 4) <= zext_ln14_2_fu_423_p1(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln14_10_reg_1367 <= grp_fu_1073_p3;
                mul_ln14_14_reg_1362 <= mul_ln14_14_fu_1080_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln14_12_reg_1372 <= add_ln14_12_fu_960_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln14_14_reg_1377 <= add_ln14_14_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln14_15_reg_1232 <= add_ln14_15_fu_718_p2;
                add_ln14_reg_1252 <= grp_fu_993_p3;
                mul_ln14_2_reg_1247 <= mul_ln14_2_fu_1000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln14_2_reg_1272 <= add_ln14_2_fu_787_p2;
                mul_ln14_4_reg_1267 <= mul_ln14_4_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln14_3_reg_1297 <= grp_fu_1020_p3;
                mul_ln14_6_reg_1292 <= mul_ln14_6_fu_1027_p2;
                    zext_ln14_4_reg_1277(4 downto 0) <= zext_ln14_4_fu_791_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln14_5_reg_1317 <= add_ln14_5_fu_866_p2;
                mul_ln14_8_reg_1312 <= mul_ln14_8_fu_1041_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln14_7_reg_1342 <= grp_fu_1047_p3;
                add_ln16_reg_1332 <= add_ln16_fu_891_p2;
                mul_ln14_10_reg_1337 <= mul_ln14_10_fu_1054_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln14_8_reg_1357 <= grp_fu_1060_p3;
                mul_ln14_12_reg_1352 <= mul_ln14_12_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1097 <= i_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1190 <= j_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln14_reg_1227 <= mul_ln14_fu_987_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xor_ln14_reg_1200 <= xor_ln14_fu_669_p2;
            end if;
        end if;
    end process;
    zext_ln14_2_reg_1102(3 downto 0) <= "0000";
    zext_ln14_2_reg_1102(9) <= '0';
    A_addr_reg_1107(3 downto 0) <= "0000";
    A_addr_1_reg_1112(3 downto 0) <= "0001";
    A_addr_2_reg_1117(3 downto 0) <= "0010";
    A_addr_3_reg_1122(3 downto 0) <= "0011";
    A_addr_4_reg_1127(3 downto 0) <= "0100";
    A_addr_5_reg_1132(3 downto 0) <= "0101";
    A_addr_6_reg_1137(3 downto 0) <= "0110";
    A_addr_7_reg_1142(3 downto 0) <= "0111";
    A_addr_8_reg_1147(3 downto 0) <= "1000";
    A_addr_9_reg_1152(3 downto 0) <= "1001";
    A_addr_10_reg_1157(3 downto 0) <= "1010";
    A_addr_11_reg_1162(3 downto 0) <= "1011";
    A_addr_12_reg_1167(3 downto 0) <= "1100";
    A_addr_13_reg_1172(3 downto 0) <= "1101";
    A_addr_14_reg_1177(3 downto 0) <= "1110";
    A_addr_15_reg_1182(3 downto 0) <= "1111";
    zext_ln14_4_reg_1277(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln11_fu_398_p2, ap_CS_fsm_state3, icmp_ln12_fu_652_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_398_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_652_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, A_addr_reg_1107, A_addr_1_reg_1112, A_addr_4_reg_1127, A_addr_6_reg_1137, A_addr_8_reg_1147, A_addr_10_reg_1157, A_addr_12_reg_1167, A_addr_14_reg_1177, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= A_addr_14_reg_1177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= A_addr_12_reg_1167;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= A_addr_10_reg_1157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= A_addr_8_reg_1147;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= A_addr_6_reg_1137;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= A_addr_4_reg_1127;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= A_addr_1_reg_1112;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= A_addr_reg_1107;
        else 
            A_address0 <= "XXXXXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, A_addr_2_reg_1117, A_addr_3_reg_1122, A_addr_5_reg_1132, A_addr_7_reg_1142, A_addr_9_reg_1152, A_addr_11_reg_1162, A_addr_13_reg_1172, A_addr_15_reg_1182)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            A_address1 <= A_addr_15_reg_1182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address1 <= A_addr_13_reg_1172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address1 <= A_addr_11_reg_1162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address1 <= A_addr_9_reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= A_addr_7_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address1 <= A_addr_5_reg_1132;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= A_addr_3_reg_1122;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= A_addr_2_reg_1117;
        else 
            A_address1 <= "XXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state3, zext_ln14_1_fu_664_p1, zext_ln14_6_fu_675_p1, tmp_16_fu_697_p3, tmp_17_fu_729_p3, tmp_18_fu_762_p3, tmp_19_fu_806_p3, tmp_20_fu_841_p3, tmp_21_fu_882_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_address0 <= tmp_21_fu_882_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            B_address0 <= tmp_20_fu_841_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            B_address0 <= tmp_19_fu_806_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_address0 <= tmp_18_fu_762_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_address0 <= tmp_17_fu_729_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address0 <= tmp_16_fu_697_p3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address0 <= zext_ln14_6_fu_675_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address0 <= zext_ln14_1_fu_664_p1(8 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_15_fu_680_p3, zext_ln14_7_fu_692_p1, zext_ln14_8_fu_724_p1, zext_ln14_9_fu_757_p1, zext_ln14_10_fu_801_p1, zext_ln14_11_fu_836_p1, zext_ln14_12_fu_877_p1, zext_ln14_13_fu_915_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            B_address1 <= zext_ln14_13_fu_915_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_address1 <= zext_ln14_12_fu_877_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            B_address1 <= zext_ln14_11_fu_836_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            B_address1 <= zext_ln14_10_fu_801_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            B_address1 <= zext_ln14_9_fu_757_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_address1 <= zext_ln14_8_fu_724_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            B_address1 <= zext_ln14_7_fu_692_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address1 <= tmp_15_fu_680_p3(8 - 1 downto 0);
        else 
            B_address1 <= "XXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= zext_ln16_fu_983_p1(8 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= add_ln14_14_reg_1377;

    C_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_12_fu_960_p2 <= std_logic_vector(signed(grp_fu_1086_p3) + signed(add_ln14_10_reg_1367));
    add_ln14_13_fu_972_p2 <= std_logic_vector(unsigned(add_ln14_12_reg_1372) + unsigned(add_ln14_9_fu_968_p2));
    add_ln14_14_fu_977_p2 <= std_logic_vector(unsigned(add_ln14_13_fu_972_p2) + unsigned(add_ln14_6_fu_964_p2));
    add_ln14_15_fu_718_p2 <= std_logic_vector(unsigned(zext_ln14_5_fu_714_p1) + unsigned(ap_const_lv7_50));
    add_ln14_16_fu_795_p2 <= std_logic_vector(unsigned(zext_ln14_4_fu_791_p1) + unsigned(ap_const_lv8_90));
    add_ln14_17_fu_831_p2 <= std_logic_vector(unsigned(zext_ln14_4_reg_1277) + unsigned(ap_const_lv8_B0));
    add_ln14_2_fu_787_p2 <= std_logic_vector(signed(grp_fu_1006_p3) + signed(add_ln14_reg_1252));
    add_ln14_5_fu_866_p2 <= std_logic_vector(signed(grp_fu_1033_p3) + signed(add_ln14_3_reg_1297));
    add_ln14_6_fu_964_p2 <= std_logic_vector(unsigned(add_ln14_5_reg_1317) + unsigned(add_ln14_2_reg_1272));
    add_ln14_9_fu_968_p2 <= std_logic_vector(signed(add_ln14_8_reg_1357) + signed(add_ln14_7_reg_1342));
    add_ln16_fu_891_p2 <= std_logic_vector(unsigned(zext_ln14_3_fu_870_p1) + unsigned(zext_ln14_2_reg_1102));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_398_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_398_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln11_fu_398_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln11_fu_398_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_404_p2 <= std_logic_vector(unsigned(i_0_reg_355) + unsigned(ap_const_lv5_1));
    icmp_ln11_fu_398_p2 <= "1" when (i_0_reg_355 = ap_const_lv5_10) else "0";
    icmp_ln12_fu_652_p2 <= "1" when (j_0_reg_366 = ap_const_lv5_10) else "0";
    j_fu_658_p2 <= std_logic_vector(unsigned(j_0_reg_366) + unsigned(ap_const_lv5_1));
    or_ln14_10_fu_577_p2 <= (tmp_fu_410_p3 or ap_const_lv9_B);
    or_ln14_11_fu_592_p2 <= (tmp_fu_410_p3 or ap_const_lv9_C);
    or_ln14_12_fu_607_p2 <= (tmp_fu_410_p3 or ap_const_lv9_D);
    or_ln14_13_fu_622_p2 <= (tmp_fu_410_p3 or ap_const_lv9_E);
    or_ln14_14_fu_637_p2 <= (tmp_fu_410_p3 or ap_const_lv9_F);
    or_ln14_1_fu_442_p2 <= (tmp_fu_410_p3 or ap_const_lv9_2);
    or_ln14_2_fu_457_p2 <= (tmp_fu_410_p3 or ap_const_lv9_3);
    or_ln14_3_fu_472_p2 <= (tmp_fu_410_p3 or ap_const_lv9_4);
    or_ln14_4_fu_487_p2 <= (tmp_fu_410_p3 or ap_const_lv9_5);
    or_ln14_5_fu_502_p2 <= (tmp_fu_410_p3 or ap_const_lv9_6);
    or_ln14_6_fu_517_p2 <= (tmp_fu_410_p3 or ap_const_lv9_7);
    or_ln14_7_fu_532_p2 <= (tmp_fu_410_p3 or ap_const_lv9_8);
    or_ln14_8_fu_547_p2 <= (tmp_fu_410_p3 or ap_const_lv9_9);
    or_ln14_9_fu_562_p2 <= (tmp_fu_410_p3 or ap_const_lv9_A);
    or_ln14_fu_427_p2 <= (tmp_fu_410_p3 or ap_const_lv9_1);
        sext_ln14_32_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln14_reg_1200),6));

        sext_ln14_33_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln14_reg_1200),7));

        sext_ln14_34_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_15_reg_1232),8));

        sext_ln14_35_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln14_reg_1200),8));

    tmp_10_fu_583_p3 <= (ap_const_lv55_0 & or_ln14_10_fu_577_p2);
    tmp_11_fu_598_p3 <= (ap_const_lv55_0 & or_ln14_11_fu_592_p2);
    tmp_12_fu_613_p3 <= (ap_const_lv55_0 & or_ln14_12_fu_607_p2);
    tmp_13_fu_628_p3 <= (ap_const_lv55_0 & or_ln14_13_fu_622_p2);
    tmp_14_fu_643_p3 <= (ap_const_lv55_0 & or_ln14_14_fu_637_p2);
    tmp_15_fu_680_p3 <= (ap_const_lv59_1 & j_0_reg_366);
    tmp_16_fu_697_p3 <= (ap_const_lv59_2 & j_0_reg_366);
    tmp_17_fu_729_p3 <= (ap_const_lv59_3 & j_0_reg_366);
    tmp_18_fu_762_p3 <= (ap_const_lv59_4 & j_0_reg_366);
    tmp_19_fu_806_p3 <= (ap_const_lv59_5 & j_0_reg_366);
    tmp_1_fu_433_p3 <= (ap_const_lv55_0 & or_ln14_fu_427_p2);
    tmp_20_fu_841_p3 <= (ap_const_lv59_6 & j_0_reg_366);
    tmp_21_fu_882_p3 <= (ap_const_lv59_7 & j_0_reg_366);
    tmp_2_fu_448_p3 <= (ap_const_lv55_0 & or_ln14_1_fu_442_p2);
    tmp_3_fu_463_p3 <= (ap_const_lv55_0 & or_ln14_2_fu_457_p2);
    tmp_4_fu_478_p3 <= (ap_const_lv55_0 & or_ln14_3_fu_472_p2);
    tmp_5_fu_493_p3 <= (ap_const_lv55_0 & or_ln14_4_fu_487_p2);
    tmp_6_fu_508_p3 <= (ap_const_lv55_0 & or_ln14_5_fu_502_p2);
    tmp_7_fu_523_p3 <= (ap_const_lv55_0 & or_ln14_6_fu_517_p2);
    tmp_8_fu_538_p3 <= (ap_const_lv55_0 & or_ln14_7_fu_532_p2);
    tmp_9_fu_553_p3 <= (ap_const_lv55_0 & or_ln14_8_fu_547_p2);
    tmp_fu_410_p3 <= (i_0_reg_355 & ap_const_lv4_0);
    tmp_s_fu_568_p3 <= (ap_const_lv55_0 & or_ln14_9_fu_562_p2);
    xor_ln14_fu_669_p2 <= (j_0_reg_366 xor ap_const_lv5_10);
    zext_ln14_10_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_16_fu_795_p2),64));
    zext_ln14_11_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_17_fu_831_p2),64));
    zext_ln14_12_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln14_34_fu_874_p1),64));
    zext_ln14_13_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln14_35_fu_912_p1),64));
    zext_ln14_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_366),64));
    zext_ln14_2_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_410_p3),10));
    zext_ln14_3_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_366),10));
    zext_ln14_4_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_366),8));
    zext_ln14_5_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_366),7));
    zext_ln14_6_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln14_fu_669_p2),64));
    zext_ln14_7_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln14_32_fu_689_p1),64));
    zext_ln14_8_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_15_fu_718_p2),64));
    zext_ln14_9_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln14_33_fu_754_p1),64));
    zext_ln14_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_410_p3),64));
    zext_ln16_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_1332),64));
end behav;
